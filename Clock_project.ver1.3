from dattetime import datetime
import time
from functools import partial
#from dateutil.tz import tzutc, tzlocal
#import pytz

import sys
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QWidget, QApplication, QLCDNumber, QSlider, QVBoxLayout, QHBoxLayout, QPushButton, QLabel



#time_now = datetime.now()
#print(time_now.strftime("%Y-%m-%d\n%H:%M:%S"))

#for i in range(10):
    #time.sleep(1)
#    time_now = datetime.now()
#    print(time_now.strftime('%H:%M:%S'))
    
#tzutc = tzutc()
#tzlocal = tzlocal()

#tzkiev = pytz.timezone('Europe/Kiev') # есть в pytz/zoneinfo
#now = datetime.now(tzkiev)
#print(now.strftime("%Y-%m-%d\n%H:%M:%S UTC%z"))

#print(tzutc)
#print(tzlocal)

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.Window_Options_init()
        self.Main_Clock_Options_init()
        self.Timer_Options_init()
        self.Stopwatch_Options_init()
        self.start_main_clock()
        
#------------------------------------------------------------------------------> Hotkeys
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
            
        
    def Window_Options_init(self): #-------------------------------------------> WindowOptions
        self.setGeometry(200, 200, 1000, 800)
        self.setWindowTitle('clock')
        
    def Main_Clock_Options_init(self): #---------------------------------------> MainClockOptions
        self.main_clock = QLCDNumber(self)
        self.main_clock.move(200, 30)
        self.main_clock.resize(600, 100)    
        self.main_clock.setDigitCount(8)
        
    def Timer_Options_init(self): #--------------------------------------------> TimerOptions
        self.timer = QLCDNumber(self)
        self.timer.setDigitCount(8)
        self.timer.display('00' + ':' + '00' + ':' + '00')
        self.timer_value = '00' + ':' + '00' + ':' + '00'
        
        self.slider_second = QSlider(Qt.Horizontal, self)
        self.slider_minute = QSlider(Qt.Horizontal, self)
        self.slider_hour = QSlider(Qt.Horizontal, self)
        
        self.slider_second.setMinimum(0)
        self.slider_minute.setMinimum(0)
        self.slider_hour.setMinimum(0)
        
        self.slider_second.setMaximum(59)
        self.slider_minute.setMaximum(59)
        self.slider_hour.setMaximum(47)
        
        self.slider_second.valueChanged.connect(self.change_timer_sec)
        self.slider_minute.valueChanged.connect(self.change_timer_min)
        self.slider_hour.valueChanged.connect(self.change_timer_hour)        
        
        self.start_timer_btn = QPushButton('Start', self)
        self.start_timer_btn.clicked.connect(self.start_tick_timer)
        
        self.finish_timer_btn = QPushButton('Finish', self)
        self.finish_timer_btn.clicked.connect(self.finish_tick_timer)
        self.finish_timer_btn.setEnabled(False)
        
        self.timer.move(30, 150)
        self.timer.resize(200, 100)
        
        self.slider_second.move(30, 270)
        self.slider_second.resize(200, 30)
        
        self.slider_minute.move(30, 310)
        self.slider_minute.resize(200, 30)
        
        self.slider_hour.move(30, 350)
        self.slider_hour.resize(200, 30)        
        
        self.start_timer_btn.move(30, 400)
        self.start_timer_btn.resize(80, 30)
        
        self.finish_timer_btn.move(150, 400)
        self.finish_timer_btn.resize(80, 30)
        
    def Stopwatch_Options_init(self): #----------------------------------------> StopwatchOptions
        self.stopwatch = QLCDNumber(self)
        self.stopwatch.setDigitCount(8)
        self.stopwatch.display('00:00:00')
        self.stopwatch_value = '00:00:00'
        self.stopwatch.move(770, 150)
        self.stopwatch.resize(200, 100)
        
        self.start_stopwatch_btn = QPushButton(self)
        self.start_stopwatch_btn.setText('Start')
        self.start_stopwatch_btn.resize(80, 30)
        self.start_stopwatch_btn.move(770, 270)
        
        self.finish_stopwatch_btn = QPushButton(self)
        self.finish_stopwatch_btn.setText('Finish')
        self.finish_stopwatch_btn.resize(80, 30)
        self.finish_stopwatch_btn.move(890, 270)
        self.finish_stopwatch_btn.setEnabled(False)
        
#------------------------------------------------------------------------------> TimerFunc
    def toggle_timer_btns(self, value):
        self.slider_second.setEnabled(value)
        self.slider_minute.setEnabled(value)
        self.slider_hour.setEnabled(value)
        self.start_timer_btn.setEnabled(value)
        
    def start_tick_timer(self):
        self.toggle_timer_btns(False)
        self.temp_timer_data = self.timer_value
        self.tick_timer(break_timer=False)
        self.finish_timer_btn.setEnabled(True)
        
    def finish_tick_timer(self):
        self.tick_timer(break_timer=True)
        self.finish_timer_btn.setEnabled(False)
        
    def tick_timer(self, break_timer):
        if break_timer:
            self.toggle_timer_btns(True)
            self.timer.display('00:00:00')
            self.timer_value = str('00:00:00')
        else:   
            timer_value = self.timer_value
            print(timer_value)
            if int(timer_value[6:]) > 0:
                self.change_timer_sec(int(timer_value[6:]) - 1)
                QTimer().singleShot(1000, partial(self.tick_timer, break_timer=False))
            else:
                if int(timer_value[3:5]) > 0:
                    self.change_timer_sec(59)
                    self.change_timer_min(int(timer_value[3:5]) - 1)
                    QTimer().singleShot(1000, partial(self.tick_timer, break_timer=False))
                else:
                    if int(timer_value[:2]) > 0:
                        self.change_timer_sec(59)
                        self.change_timer_min(59)
                        self.change_timer_hour(int(timer_value[:2]) - 1)
                        QTimer().singleShot(1000, partial(self.tick_timer, break_timer=False))
                    else:
                        self.timer_alarm()
                        self.toggle_timer_btns(True)
                        self.timer.display(self.temp_timer_data)
                        self.timer_value = str(self.temp_timer_data)
        
    def change_timer_sec(self, value):
        fixed_data = self.timer_value[:6] + str(int(value)).rjust(2, '0')
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
        
    def change_timer_min(self, value):
        fixed_data = self.timer_value[:3] + str(int(value)).rjust(2, '0') + self.timer_value[5:]
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
        
    def change_timer_hour(self, value):
        fixed_data = str(int(value)).rjust(2, '0') + self.timer_value[2:]
        self.timer.display(fixed_data)
        self.timer_value = fixed_data
        
    def timer_alarm(self):
        pass
    
#------------------------------------------------------------------------------> StopwatchFunc
    def start_stopwatch(self):
        pass
    
    def stopwatch_alarm(self):
        pass
#------------------------------------------------------------------------------> StartMainClock
    def start_main_clock(self):
        time_now = datetime.now()
        self.main_clock.display(time_now.strftime('%H' + ':' + '%M' + ':' + '%S'))
        QTimer().singleShot(1000, self.start_main_clock)

#------------------------------------------------------------------------------> Main
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec())
